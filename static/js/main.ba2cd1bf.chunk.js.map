{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","About","className","App","useState","visible","setVisible","css","setCss","onClick","viewBox","xmlns","d","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAGA,SAASA,IACP,OACE,6BACE,2CAKN,SAASC,IACP,OACE,6BACE,4BAAQC,UAAU,wEAAlB,WA2ESC,MApEf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAESF,mBACpB,4DAHW,mBAENG,EAFM,KAEDC,EAFC,KAab,OACE,oCACE,kBAAC,IAAD,KACE,yBAAKN,UAAU,+DACb,yBAAKA,UAAU,mDACb,0BAAMA,UAAU,wCAAhB,2BAIF,yBAAKA,UAAU,mBACb,4BACEO,QAnBa,WAErBD,EADEH,EACK,2DAEA,6DAETC,GAAYD,IAcFH,UAAU,gHAEV,yBACEA,UAAU,uBACVQ,QAAQ,YACRC,MAAM,8BAEN,uCACA,0BAAMC,EAAE,mDAId,yBAAKV,UAAWK,GACd,yBAAKL,UAAU,wBACb,kBAAC,IAAD,CACEW,GAAG,+BACHX,UAAU,0EAFZ,QAMA,kBAAC,IAAD,CACEW,GAAG,qCACHX,UAAU,0EAFZ,YAUN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,sCACV,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAK,iCACV,kBAACd,EAAD,W,MCrEQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba2cd1bf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction Home() {\n  return (\n    <div>\n      <pre>Css Testo</pre>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n        Button\n      </button>\n    </div>\n  );\n}\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [css, setCss] = useState(\n    \"w-full block flex-grow lg:flex lg:items-center lg:w-auto\"\n  );\n  const setToggleVisible = () => {\n    if (visible) {\n      setCss(\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\");\n    } else {\n      setCss(\"w-full hidden flex-grow lg:flex lg:items-center lg:w-auto\");\n    }\n    setVisible(!visible);\n  };\n  return (\n    <>\n      <Router>\n        <nav className=\"flex items-center justify-between flex-wrap bg-teal-500 p-6\">\n          <div className=\"flex items-center flex-shrink-0 text-white mr-6\">\n            <span className=\"font-semibold text-xl tracking-tight\">\n              Canducci GraphQL Query\n            </span>\n          </div>\n          <div className=\"block lg:hidden\">\n            <button\n              onClick={setToggleVisible}\n              className=\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\"\n            >\n              <svg\n                className=\"fill-current h-3 w-3\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <title>Menu</title>\n                <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n              </svg>\n            </button>\n          </div>\n          <div className={css}>\n            <div className=\"text-sm lg:flex-grow\">\n              <Link\n                to=\"/canducci-graphql-query-site\"\n                className=\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\"\n              >\n                Home\n              </Link>\n              <Link\n                to=\"/canducci-graphql-query-site/about\"\n                className=\"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\"\n              >\n                About\n              </Link>\n            </div>\n          </div>\n        </nav>\n\n        <Switch>\n          <Route path=\"/canducci-graphql-query-site/about\">\n            <About />\n          </Route>\n          <Route path=\"/canducci-graphql-query-site/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/tailwind.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n\n//https://blog.logrocket.com/create-react-app-and-tailwindcss/\n"],"sourceRoot":""}